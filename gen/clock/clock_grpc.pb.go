// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: clock/clock.proto

package proto_demo_clock_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClockClient is the client API for Clock service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClockClient interface {
	// Get current time by timezone
	Now(ctx context.Context, in *ClockRequest, opts ...grpc.CallOption) (*ClockResponse, error)
}

type clockClient struct {
	cc grpc.ClientConnInterface
}

func NewClockClient(cc grpc.ClientConnInterface) ClockClient {
	return &clockClient{cc}
}

func (c *clockClient) Now(ctx context.Context, in *ClockRequest, opts ...grpc.CallOption) (*ClockResponse, error) {
	out := new(ClockResponse)
	err := c.cc.Invoke(ctx, "/clock.Clock/Now", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClockServer is the server API for Clock service.
// All implementations must embed UnimplementedClockServer
// for forward compatibility
type ClockServer interface {
	// Get current time by timezone
	Now(context.Context, *ClockRequest) (*ClockResponse, error)
	mustEmbedUnimplementedClockServer()
}

// UnimplementedClockServer must be embedded to have forward compatible implementations.
type UnimplementedClockServer struct {
}

func (UnimplementedClockServer) Now(context.Context, *ClockRequest) (*ClockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Now not implemented")
}
func (UnimplementedClockServer) mustEmbedUnimplementedClockServer() {}

// UnsafeClockServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClockServer will
// result in compilation errors.
type UnsafeClockServer interface {
	mustEmbedUnimplementedClockServer()
}

func RegisterClockServer(s grpc.ServiceRegistrar, srv ClockServer) {
	s.RegisterService(&Clock_ServiceDesc, srv)
}

func _Clock_Now_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClockServer).Now(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clock.Clock/Now",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClockServer).Now(ctx, req.(*ClockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Clock_ServiceDesc is the grpc.ServiceDesc for Clock service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Clock_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clock.Clock",
	HandlerType: (*ClockServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Now",
			Handler:    _Clock_Now_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "clock/clock.proto",
}
