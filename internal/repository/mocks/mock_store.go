// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	domain "github.com/updevru/go-micro-kit-example/internal/domain"

	time "time"
)

// StoreInterface is an autogenerated mock type for the StoreInterface type
type StoreInterface struct {
	mock.Mock
}

type StoreInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *StoreInterface) EXPECT() *StoreInterface_Expecter {
	return &StoreInterface_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: key
func (_m *StoreInterface) Delete(key string) error {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type StoreInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - key string
func (_e *StoreInterface_Expecter) Delete(key interface{}) *StoreInterface_Delete_Call {
	return &StoreInterface_Delete_Call{Call: _e.mock.On("Delete", key)}
}

func (_c *StoreInterface_Delete_Call) Run(run func(key string)) *StoreInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *StoreInterface_Delete_Call) Return(_a0 error) *StoreInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StoreInterface_Delete_Call) RunAndReturn(run func(string) error) *StoreInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDead provides a mock function with given fields: date
func (_m *StoreInterface) DeleteDead(date time.Time) (int, error) {
	ret := _m.Called(date)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDead")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(time.Time) (int, error)); ok {
		return rf(date)
	}
	if rf, ok := ret.Get(0).(func(time.Time) int); ok {
		r0 = rf(date)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(time.Time) error); ok {
		r1 = rf(date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreInterface_DeleteDead_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDead'
type StoreInterface_DeleteDead_Call struct {
	*mock.Call
}

// DeleteDead is a helper method to define mock.On call
//   - date time.Time
func (_e *StoreInterface_Expecter) DeleteDead(date interface{}) *StoreInterface_DeleteDead_Call {
	return &StoreInterface_DeleteDead_Call{Call: _e.mock.On("DeleteDead", date)}
}

func (_c *StoreInterface_DeleteDead_Call) Run(run func(date time.Time)) *StoreInterface_DeleteDead_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time))
	})
	return _c
}

func (_c *StoreInterface_DeleteDead_Call) Return(_a0 int, _a1 error) *StoreInterface_DeleteDead_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StoreInterface_DeleteDead_Call) RunAndReturn(run func(time.Time) (int, error)) *StoreInterface_DeleteDead_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: key
func (_m *StoreInterface) Read(key string) (*domain.ItemStore, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 *domain.ItemStore
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.ItemStore, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.ItemStore); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ItemStore)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreInterface_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type StoreInterface_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - key string
func (_e *StoreInterface_Expecter) Read(key interface{}) *StoreInterface_Read_Call {
	return &StoreInterface_Read_Call{Call: _e.mock.On("Read", key)}
}

func (_c *StoreInterface_Read_Call) Run(run func(key string)) *StoreInterface_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *StoreInterface_Read_Call) Return(_a0 *domain.ItemStore, _a1 error) *StoreInterface_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StoreInterface_Read_Call) RunAndReturn(run func(string) (*domain.ItemStore, error)) *StoreInterface_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: item
func (_m *StoreInterface) Save(item domain.ItemStore) error {
	ret := _m.Called(item)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.ItemStore) error); ok {
		r0 = rf(item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreInterface_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type StoreInterface_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - item domain.ItemStore
func (_e *StoreInterface_Expecter) Save(item interface{}) *StoreInterface_Save_Call {
	return &StoreInterface_Save_Call{Call: _e.mock.On("Save", item)}
}

func (_c *StoreInterface_Save_Call) Run(run func(item domain.ItemStore)) *StoreInterface_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.ItemStore))
	})
	return _c
}

func (_c *StoreInterface_Save_Call) Return(_a0 error) *StoreInterface_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StoreInterface_Save_Call) RunAndReturn(run func(domain.ItemStore) error) *StoreInterface_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewStoreInterface creates a new instance of StoreInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStoreInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *StoreInterface {
	mock := &StoreInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
